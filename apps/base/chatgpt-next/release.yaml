---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: bjw-s-charts
  namespace: ${chatgpt_next_app_name}
spec:
  interval: 12h
  url: https://bjw-s-labs.github.io/helm-charts/
---
apiVersion: v1
kind: Namespace
metadata:
  name: ${chatgpt_next_app_name}
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: ${chatgpt_next_app_name}
  namespace: ${chatgpt_next_app_name}
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 4.1.2
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: ${chatgpt_next_app_name}
  install:
    remediation:
      retries: 3
  values:
    controllers:
      ${chatgpt_next_app_name}:
        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          app:
            image:
              repository: yidadaa/chatgpt-next-web
              tag: v2.16.0
            env: 
              TZ: Europe/Warsaw
              UID: 1000
              GID: 1000
            envFrom: 
              - secretRef:
                  name: chatgpt-next-secret
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities:
                drop:
                  - ALL
            ports:
              - name: http
                containerPort: &httpPort 8080

            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 1Gi
        pod:
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            fsGroupChangePolicy: OnRootMismatch
    service:
      app:
        controller: ${chatgpt_next_app_name}
        type: ClusterIP
        ports:
          http:
            port: *httpPort
            protocol: TCP

    ingress:
      app:
        className: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"

    persistence:
      config:
        enabled: true
        type: persistentVolumeClaim
        storageClass: longhorn
        accessMode: ReadWriteOnce
        size: 10Gi

